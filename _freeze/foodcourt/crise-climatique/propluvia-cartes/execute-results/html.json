{
  "hash": "3c45059201fc8e46556d93ca84666ff9",
  "result": {
    "markdown": "---\nexecute:\n  echo: true\ncode-fold: false\n---\n\n# évolution annuelle des restrictions d'eau\n\n:::{.callout-important appearance=\"simple\"}\nContenu encore en cours d'écriture et de peaufinage. Je suis  débutant en cartographie et en geopandas, il y a certainment moyen d'optimiser le code. Je compte également apporter plus de nuance à la visualisation finale.\n:::\n\n## résumé\n\nComment les politiques publiques s'emparent des problématiqes de la crise climatiques avec des restrictions d'eau ?\n\nLes données utilisées proviennent du scrapping effectué par [cquest] du site [propluvia]. Elles concernent allant du `01.01.2010 ` au `06.08.2022`.\n\n- [ ] rajouter descriptif propluvia\n\n[cquest]: https://data.cquest.org/propluvia/\n[propluvia]: http://propluvia.developpement-durable.gouv.fr/\n\n## préparation des données\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\nimport cartiflette.s3\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\npropluvia = (\n\tpd\n\t.read_csv('https://raw.githubusercontent.com/taniki/propluvia/main/propluvia.csv')\n\t.assign(\n\t\tDate_debut = lambda d: pd.to_datetime(d.Date_debut, errors='coerce'),\n\t\tDate_fin = lambda d: pd.to_datetime(d.Date_fin, errors='coerce'),\n\t\tNIVEAU= lambda d: d.NIVEAU.astype('category'),\n\t\tRegion= lambda d: d.Region.astype('category'),\n\t\tDepartement= lambda d: d.Departement.astype('category'),\n\t)\n\t.drop_duplicates()\n)\n\npropluvia\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nzones = (\n    gpd\n    .read_file('../../datasets/propluvia/SHP_20220806.geojson')\n    .assign(\n        type= lambda d: d.type.astype('category')\n    )\n    .set_index('codeZA')\n)\n\nzones\n```\n:::\n\n\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nzones_exclude = [\n    '971',\n    '972',\n    '973',\n    '974',\n    '976',\n    '97500',\n    '98'\n]\n```\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nniveaux = {\n    'Crise': '#FF4136',\n    'Alerte renforcée': '#FF851B',\n    'Alerte': '#FFDC00',\n    'Vigilance': '#AAAAAA'\n}\n```\n:::\n\n\n### préparation du fond de carte\n\nhttps://github.com/gregoiredavid/france-geojson\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndepartements = (\n    gpd\n    .read_file('../../datasets/propluvia/departements-version-simplifiee.geojson')\n)\n\ndepartements.plot(\n    color='white',\n    edgecolor='#ddd',\n    linewidth=0.4\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n<AxesSubplot:>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](propluvia-cartes_files/figure-html/cell-8-output-2.png){}\n:::\n:::\n\n\n### carte en fonction de l'année et du niveau d'alerte\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndef single(year, level, ax_):\n    \n    departements.plot(\n        color='white',\n        edgecolor='#ddd',\n        linewidth=0.4,\n        ax=ax_\n    )\n    \n    ax = (\n        propluvia\n        .query('Date_debut.dt.year == @year or Date_fin.dt.year == @year')\n        .query('NIVEAU == @level')\n        .set_index('Code_ZA')\n        .join(zones)\n        .query('not codeDep.isin(@zones_exclude)')\n        .pipe(lambda df: gpd.GeoDataFrame(df) )\n        .plot(\n            color=niveaux[level],\n            ax=ax_\n        )\n    )\n    \n    ax.set_axis_off()\n    # ax.xaxis.set_visible(False)\n    # plt.setp(axes[1,0].spines.values(), visible=False)\n\n    return ax\n\nannees = propluvia.Date_debut.dt.year.dropna().unique()\n\n#[ single(int(y), n) for y in annees for n in list(niveaux.keys()) ]\n#[ single(2022, n) for n in list(niveaux.keys()) ]\n\nfig, ax = plt.subplots()\n\nsingle(2022, 'Crise', ax)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](propluvia-cartes_files/figure-html/cell-9-output-1.png){}\n:::\n:::\n\n\n## carte des territoires concernés par une arrêté par année\n\n::: {.cell .column-page layout-ncol='1' execution_count=9}\n``` {.python .cell-code}\nannees_ = [2022, 2018, 2016, 2014, 2012]\n#annees_ = [2022, 2019]\n\npad = 5\n\nfig, ax = plt.subplots(len(annees_), len(niveaux), figsize=(len(niveaux)*4, len(annees_)*4), sharex='all', sharey='all')\n\nfor i,y in enumerate(annees_):\n    for j,n in enumerate(list(niveaux.keys())):\n        single(y, n, ax[i,j])\n        \nfor c,n in enumerate(niveaux):\n    ax[0,c].set_title(n)\n    \nfor r,y in enumerate(annees_):\n    ax[r,0].annotate(\n        y,\n        xy=(0, 0.5),\n        xytext=(-ax[r,0].yaxis.labelpad-pad,0),                    \n        xycoords=ax[r,0].yaxis.label,\n        textcoords='offset points',\n        size='large',\n        ha='right',\n        va='center'\n    )\n\nplt.tight_layout()\nfig.subplots_adjust(left=0.18, top=0.95)\n\nplt.savefig('graphics/propluvia-carte-sample.png', facecolor='white', transparent=False)\n```\n\n::: {.cell-output .cell-output-display}\n![](propluvia-cartes_files/figure-html/cell-10-output-1.png){}\n:::\n:::\n\n\n## pour aller plus loin\n\n- [Données spatiales: découverte de geopandas](https://linogaliana-teaching.netlify.app/geopandas/)\n- [cartiflette](https://github.com/InseeFrLab/cartiflette)\n\n",
    "supporting": [
      "propluvia-cartes_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}