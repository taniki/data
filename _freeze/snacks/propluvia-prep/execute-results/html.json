{
  "hash": "a8d3873df9fac2e99b2077baa0df56f5",
  "result": {
    "markdown": "---\nauthor: tam kien duong\necho: true\ncode-fold: false\n---\n\n# visualiser les données d'alerte propluvia\n\nDans ce snack, nous allons regarder comment :\n\n- préparer des données qui ne sont pas d'une qualité vertigineuse\n- produire un graphique exploratoire\n\nLe but est de voir comment aller au plus simple de la donnée jusqu'à la visualisation.\n\n## ingrédients\n\nOn commence par importer pandas. Rien de bien surprenant jusque là.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n```\n:::\n\n\nOn importe les données légèrement brute de propluvia tout en préparant le typage des colonnes qui nous intéressent en les transformant en date ou en catégorie.\n\n::: {.cell .column-page execution_count=2}\n``` {.python .cell-code}\npropluvia = (\n\tpd\n\t.read_csv('https://raw.githubusercontent.com/taniki/propluvia/main/propluvia.csv')\n\t.assign(\n\t\tDate_debut = lambda d: pd.to_datetime(d.Date_debut, errors='coerce'),\n\t\tDate_fin = lambda d: pd.to_datetime(d.Date_fin, errors='coerce'),\n\t\tNIVEAU= lambda d: d.NIVEAU.astype('category'),\n\t\tRegion= lambda d: d.Region.astype('category'),\n\t\tDepartement= lambda d: d.Departement.astype('category'),\n\t)\n\t.drop_duplicates()\n)\n\npropluvia\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Code_ZA</th>\n      <th>Libelle_ZA</th>\n      <th>NIVEAU</th>\n      <th>Date_debut</th>\n      <th>Date_fin</th>\n      <th>Duree</th>\n      <th>Surface</th>\n      <th>AC_Concerne</th>\n      <th>Numero_AR</th>\n      <th>Region</th>\n      <th>Bassin</th>\n      <th>Departement</th>\n      <th>Type_de_zone</th>\n      <th>Durée</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>11_77_02</td>\n      <td>Nappe Champigny Est</td>\n      <td>Crise renforcée</td>\n      <td>2010-05-01</td>\n      <td>2011-02-28</td>\n      <td>303.0</td>\n      <td>550.51</td>\n      <td>NaN</td>\n      <td>2010/DDEA/SEPR/195</td>\n      <td>Île-de-France</td>\n      <td>SEINE-NORMANDIE</td>\n      <td>Seine-et-Marne</td>\n      <td>Souterraine</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>11_77_03</td>\n      <td>Nappe Champigny Ouest</td>\n      <td>Crise renforcée</td>\n      <td>2010-05-01</td>\n      <td>2011-02-28</td>\n      <td>303.0</td>\n      <td>1718.08</td>\n      <td>NaN</td>\n      <td>2010/DDEA/SEPR/195</td>\n      <td>Île-de-France</td>\n      <td>SEINE-NORMANDIE</td>\n      <td>Seine-et-Marne</td>\n      <td>Souterraine</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>11_91_01</td>\n      <td>Bassin de l'Yerres</td>\n      <td>Absence de restriction</td>\n      <td>2010-05-05</td>\n      <td>2011-03-01</td>\n      <td>300.0</td>\n      <td>47.49</td>\n      <td>NaN</td>\n      <td>2010-DDEA?SE?132</td>\n      <td>Île-de-France</td>\n      <td>SEINE-NORMANDIE</td>\n      <td>Essonne</td>\n      <td>Superficielle</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>11_91_01</td>\n      <td>Nappe Champigny Ouest</td>\n      <td>Crise renforcée</td>\n      <td>2010-05-05</td>\n      <td>2011-03-01</td>\n      <td>300.0</td>\n      <td>76.94</td>\n      <td>NaN</td>\n      <td>2010-DDEA?SE?132</td>\n      <td>Île-de-France</td>\n      <td>SEINE-NORMANDIE</td>\n      <td>Essonne</td>\n      <td>Souterraine</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>11_91_02</td>\n      <td>Bassin de l'Ecole</td>\n      <td>Absence de restriction</td>\n      <td>2010-05-05</td>\n      <td>2011-03-01</td>\n      <td>300.0</td>\n      <td>117.62</td>\n      <td>NaN</td>\n      <td>2010-DDEA?SE?132</td>\n      <td>Île-de-France</td>\n      <td>SEINE-NORMANDIE</td>\n      <td>Essonne</td>\n      <td>Superficielle</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>42964</th>\n      <td>MP 14</td>\n      <td>Nappe des Autises</td>\n      <td>Alerte</td>\n      <td>2022-05-09</td>\n      <td>2022-05-15</td>\n      <td>6.0</td>\n      <td>260.97</td>\n      <td>NaN</td>\n      <td>AP-22-DDTM85-303</td>\n      <td>Pays de la Loire</td>\n      <td>LOIRE-BRETAGNE</td>\n      <td>Vendée</td>\n      <td>Souterraine</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>42965</th>\n      <td>MP 14</td>\n      <td>Nappe des Autises</td>\n      <td>Alerte</td>\n      <td>2022-06-17</td>\n      <td>2022-07-01</td>\n      <td>14.0</td>\n      <td>260.97</td>\n      <td>NaN</td>\n      <td>22-DDTM85-409</td>\n      <td>Pays de la Loire</td>\n      <td>LOIRE-BRETAGNE</td>\n      <td>Vendée</td>\n      <td>Souterraine</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>42966</th>\n      <td>MP 14</td>\n      <td>Nappe des Autises</td>\n      <td>Alerte</td>\n      <td>2022-05-20</td>\n      <td>2022-06-07</td>\n      <td>18.0</td>\n      <td>260.97</td>\n      <td>NaN</td>\n      <td>AP-22-DDTM85-336</td>\n      <td>Pays de la Loire</td>\n      <td>LOIRE-BRETAGNE</td>\n      <td>Vendée</td>\n      <td>Souterraine</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>42967</th>\n      <td>MP 14</td>\n      <td>Nappe des Autises</td>\n      <td>Vigilance</td>\n      <td>2022-07-08</td>\n      <td>2022-07-22</td>\n      <td>14.0</td>\n      <td>260.97</td>\n      <td>NaN</td>\n      <td>22-DDTM85-452</td>\n      <td>Pays de la Loire</td>\n      <td>LOIRE-BRETAGNE</td>\n      <td>Vendée</td>\n      <td>Souterraine</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>42968</th>\n      <td>MP 14</td>\n      <td>Nappe des Autises</td>\n      <td>Vigilance</td>\n      <td>2022-07-22</td>\n      <td>2022-10-31</td>\n      <td>101.0</td>\n      <td>260.97</td>\n      <td>NaN</td>\n      <td>22-DDTM85-504</td>\n      <td>Pays de la Loire</td>\n      <td>LOIRE-BRETAGNE</td>\n      <td>Vendée</td>\n      <td>Souterraine</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>42857 rows × 14 columns</p>\n</div>\n```\n:::\n:::\n\n\n## niveaux d'alerte\n\nOn goute ensuite aux données. Ici, je regarde le nombre d'arrêté par niveau d'alerte. Le `Serie.to_frame()` est surtout esthétique, `Serie.value_counts()` renvoyant ici une série qui serait représenté sous forme de texte et non de tableau sans cela.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\npropluvia.NIVEAU.value_counts().to_frame()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>NIVEAU</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Alerte</th>\n      <td>10854</td>\n    </tr>\n    <tr>\n      <th>Vigilance</th>\n      <td>10161</td>\n    </tr>\n    <tr>\n      <th>Crise</th>\n      <td>10088</td>\n    </tr>\n    <tr>\n      <th>Alerte renforcée</th>\n      <td>9504</td>\n    </tr>\n    <tr>\n      <th>Crise renforcée</th>\n      <td>851</td>\n    </tr>\n    <tr>\n      <th>Arrêt des prélèvements non prioritaires</th>\n      <td>593</td>\n    </tr>\n    <tr>\n      <th>Crise modérée</th>\n      <td>550</td>\n    </tr>\n    <tr>\n      <th>Absence de restriction</th>\n      <td>149</td>\n    </tr>\n    <tr>\n      <th>Modification du régime hydraulique</th>\n      <td>28</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nPar soucis de concision, on ne va garder que les 4 principaux niveaux.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nniveaux = propluvia.NIVEAU.value_counts().index.tolist()[:4]\n```\n:::\n\n\n## évolution de la surface des niveaux d'alerte\n\nAfin de décomposer mon code, je prépare une petite fonction qui me donne la surface et le nombre d'arrêté par niveau d'alerte pour une date donnée.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndef agg_day(date):\n\treturn (\n\t\tpropluvia\n\t\t[(propluvia.Date_debut <= date) * (propluvia.Date_fin >= date)]\n\t\t.groupby('NIVEAU')\n\t\t.agg({\n\t\t\t'Surface': 'sum',\n\t\t\t'Numero_AR': 'count'\n\t\t})\n\t\t.reset_index()\n\t\t.assign(\n\t\t\tdate = date,\n\t\t)\n\t\t#.drop(columns=propluvia.columns)\n\t)\n\nagg_day('2022-06-15')\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>NIVEAU</th>\n      <th>Surface</th>\n      <th>Numero_AR</th>\n      <th>date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Absence de restriction</td>\n      <td>0.00</td>\n      <td>0</td>\n      <td>2022-06-15</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Alerte</td>\n      <td>87259.51</td>\n      <td>199</td>\n      <td>2022-06-15</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Alerte renforcée</td>\n      <td>24435.77</td>\n      <td>73</td>\n      <td>2022-06-15</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Arrêt des prélèvements non prioritaires</td>\n      <td>0.00</td>\n      <td>0</td>\n      <td>2022-06-15</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Crise</td>\n      <td>6779.20</td>\n      <td>38</td>\n      <td>2022-06-15</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Crise modérée</td>\n      <td>0.00</td>\n      <td>0</td>\n      <td>2022-06-15</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Crise renforcée</td>\n      <td>0.00</td>\n      <td>0</td>\n      <td>2022-06-15</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Modification du régime hydraulique</td>\n      <td>0.00</td>\n      <td>0</td>\n      <td>2022-06-15</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Vigilance</td>\n      <td>241842.46</td>\n      <td>414</td>\n      <td>2022-06-15</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLa sélection est faite avec [`[]`](https://pandas.pydata.org/docs/user_guide/indexing.html#basics) par force d'habitude mais pour des soucis de lisibilité, il est souvent préférable d'utiliser [`DataFrame.query()`](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html)\n\nPour aboutir à la visualisation, il y a deux étapes importantes :\n\n- la transformation en table de pivot afin que chaque ligne du graphique corresponde à une colonne. Ici comme, on cherche à avoir une ligne par niveau d'alerte.\n- l'utilisation de `DataFrame.plot.line()` afin de séparer chaque niveau d'alerte avec le paramètre `subplots` et la normalisation de l'axe des ordonnées avec `sharey`.\n\n::: {.cell layout-ncol='1' execution_count=6}\n``` {.python .cell-code}\n(\n\tpd\n\t.concat([ agg_day(date) for date in pd.date_range(propluvia.Date_debut.min(),propluvia.Date_fin.max())])\n    .query('NIVEAU.isin(@niveaux)')\n    .pivot_table(\n\t\tindex='date',\n\t\tcolumns='NIVEAU',\n\t\tvalues='Surface'\n\t)\n\t.plot\n\t\t.line(\n\t\t\tsharey=True,\n\t\t\tsubplots=True,\n\t\t\tfigsize=(15,len(niveaux)*3)\n\t\t)\n);\n```\n\n::: {.cell-output .cell-output-display}\n![](propluvia-prep_files/figure-html/cell-7-output-1.png){}\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n(\n    propluvia\n    .query('NIVEAU.isin(@niveaux)')\n    .pivot_table(\n        index='Region',\n        columns='NIVEAU',\n        values='Numero_AR',\n        aggfunc='count'\n    )\n    [niveaux]\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>NIVEAU</th>\n      <th>Alerte</th>\n      <th>Vigilance</th>\n      <th>Crise</th>\n      <th>Alerte renforcée</th>\n    </tr>\n    <tr>\n      <th>Region</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Auvergne-Rhône-Alpes</th>\n      <td>1238</td>\n      <td>2022</td>\n      <td>273</td>\n      <td>727</td>\n    </tr>\n    <tr>\n      <th>Bourgogne-Franche-Comté</th>\n      <td>764</td>\n      <td>500</td>\n      <td>432</td>\n      <td>425</td>\n    </tr>\n    <tr>\n      <th>Bretagne</th>\n      <td>135</td>\n      <td>232</td>\n      <td>38</td>\n      <td>93</td>\n    </tr>\n    <tr>\n      <th>Centre-Val de Loire</th>\n      <td>1096</td>\n      <td>492</td>\n      <td>2104</td>\n      <td>1211</td>\n    </tr>\n    <tr>\n      <th>Corse</th>\n      <td>21</td>\n      <td>62</td>\n      <td>0</td>\n      <td>17</td>\n    </tr>\n    <tr>\n      <th>Grand-Est</th>\n      <td>357</td>\n      <td>115</td>\n      <td>10</td>\n      <td>206</td>\n    </tr>\n    <tr>\n      <th>Hauts-de-France</th>\n      <td>209</td>\n      <td>399</td>\n      <td>22</td>\n      <td>46</td>\n    </tr>\n    <tr>\n      <th>Normandie</th>\n      <td>158</td>\n      <td>342</td>\n      <td>29</td>\n      <td>66</td>\n    </tr>\n    <tr>\n      <th>Nouvelle-Aquitaine</th>\n      <td>3103</td>\n      <td>1048</td>\n      <td>3583</td>\n      <td>3383</td>\n    </tr>\n    <tr>\n      <th>Occitanie</th>\n      <td>2104</td>\n      <td>1927</td>\n      <td>2377</td>\n      <td>1889</td>\n    </tr>\n    <tr>\n      <th>Pays de la Loire</th>\n      <td>1154</td>\n      <td>2094</td>\n      <td>1081</td>\n      <td>1131</td>\n    </tr>\n    <tr>\n      <th>Provence-Alpes-Côte d'Azur</th>\n      <td>354</td>\n      <td>687</td>\n      <td>75</td>\n      <td>244</td>\n    </tr>\n    <tr>\n      <th>Île-de-France</th>\n      <td>161</td>\n      <td>241</td>\n      <td>64</td>\n      <td>66</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## après\n\nVoilà, je suis allé au plus court et il y a possibilité d'aller plus loin :\n\n- ordonner les niveaux d'alerte : [Categorical data](https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html)\n- améliorer le graphique de synthèse : [pandas.DataFrame.plot](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.plot.html)\n\n",
    "supporting": [
      "propluvia-prep_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}